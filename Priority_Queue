class Node:
    def __init__(self, NewData, NewPriority):
        self.data = NewData
        self.priority = NewPriority

class PriorityQueue:
    def __init__(self):
        self.items = []

    def isempty(self):
        return self.items == []

    def enqueue(self, item):
        for i in range(len(self.items)):
            if item.priority >= self.items[i].priority:
                self.items.insert(i, item)
                break
        else:
            self.items.append(item)

    def dequeue(self):
        if not self.isempty():
            return self.items.pop(0)

    def peek(self):
        if not self.isempty():
            return self.items[0]

    def size(self):
        return len(self.items)

    def display(self):
        for item in self.items:
            print('|', format(str(item.data) + "(" + str(item.priority) + ")", '>6'), end=" ")
        print("|")

q = PriorityQueue()
while True:
    print("\nProgram to implement priority queue")
    print("1. Enqueue")
    print("2. Dequeue")
    print("3. Peek")
    print("4. Display")
    print("5. Exit")

    choice = int(input("Enter your choice: "))
    if choice == 1:
        data = input("Enter the data: ")
        priority = int(input("Enter the priority: "))
        newNode = Node(data, priority)
        q.enqueue(newNode)
    elif choice == 2:
        if q.isempty():
            print("Queue is empty")
        else:
            popNode = q.dequeue()
            print("Dequeued node is:", popNode.data, "with priority", popNode.priority)
    elif choice == 3:
        if q.isempty():
            print("Queue is empty")
        else:
            peekNode = q.peek()
            print("Peeked node is:", peekNode.data, "with priority", peekNode.priority)
    elif choice == 4:
        if q.isempty():
            print("Queue is empty")
        else:
            q.display()
    elif choice == 5:
        print("Quitting...")
        break
    else:
        print("Invalid choice! Please enter the correct choice!")
